const API_BASE = "http://localhost:3001/api"
const Quill = window.Quill // Declare the Quill variable

let currentPosts = []
let currentEditId = null
let currentMedia = []
let quillEditor = null

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener("DOMContentLoaded", () => {
  initializeEditor()
  loadNews()
  setupEventListeners()

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  document.getElementById("date").value = new Date().toISOString().split("T")[0]
})

function initializeEditor() {
  quillEditor = new Quill("#editor", {
    theme: "snow",
    modules: {
      toolbar: [
        [{ header: [1, 2, 3, false] }],
        ["bold", "italic", "underline", "strike"],
        [{ color: [] }, { background: [] }],
        [{ list: "ordered" }, { list: "bullet" }],
        [{ align: [] }],
        ["blockquote", "code-block"],
        ["link", "image"],
        ["clean"],
      ],
    },
    placeholder: "–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏...",
  })
}

function setupEventListeners() {
  document.getElementById("loadNews").addEventListener("click", loadNews)
  document.getElementById("saveNews").addEventListener("click", saveAllNews)
  document.getElementById("savePost").addEventListener("click", savePost)
  document.getElementById("resetForm").addEventListener("click", resetForm)

  const uploadArea = document.getElementById("uploadArea")
  const mediaInput = document.getElementById("media")

  uploadArea.addEventListener("click", () => mediaInput.click())
  uploadArea.addEventListener("dragover", handleDragOver)
  uploadArea.addEventListener("dragleave", handleDragLeave)
  uploadArea.addEventListener("drop", handleDrop)
  mediaInput.addEventListener("change", handleMediaUpload)
}

function handleDragOver(e) {
  e.preventDefault()
  e.currentTarget.classList.add("dragover")
}

function handleDragLeave(e) {
  e.preventDefault()
  e.currentTarget.classList.remove("dragover")
}

function handleDrop(e) {
  e.preventDefault()
  e.currentTarget.classList.remove("dragover")
  const files = Array.from(e.dataTransfer.files)
  handleMediaFiles(files)
}

async function loadNews() {
  try {
    showStatus("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏...", "warn")
    const response = await fetch(`${API_BASE}/news`)
    const data = await response.json()

    if (response.ok) {
      currentPosts = data.posts || []
      renderPostsTable()
      showStatus(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${currentPosts.length} –Ω–æ–≤–æ—Å—Ç–µ–π`, "ok")
    } else {
      throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    }
  } catch (error) {
    showStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, "err")
  }
}

async function saveAllNews() {
  try {
    showStatus("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...", "warn")
    const response = await fetch(`${API_BASE}/news`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ posts: currentPosts }),
    })

    const result = await response.json()
    if (response.ok) {
      showStatus("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "ok")
    } else {
      throw new Error(result.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    }
  } catch (error) {
    showStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, "err")
  }
}

function renderPostsTable() {
  const tbody = document.getElementById("postsTbody")
  tbody.innerHTML = ""

  currentPosts.forEach((post) => {
    const row = document.createElement("tr")
    row.innerHTML = `
      <td>${formatDate(post.date)}</td>
      <td><span class="category-badge category-${post.category}">${getCategoryName(post.category)}</span></td>
      <td><strong>${post.title}</strong></td>
      <td>${post.tags ? post.tags.join(", ") : "‚Äî"}</td>
      <td class="actions">
        <button class="btn btn-sm" onclick="editPost('${post.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
        <button class="btn btn-sm btn-danger" onclick="deletePost('${post.id}')" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
      </td>
    `
    tbody.appendChild(row)
  })
}

function formatDate(dateStr) {
  const date = new Date(dateStr)
  return date.toLocaleDateString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  })
}

function getCategoryName(category) {
  const names = {
    news: "–ù–æ–≤–æ—Å—Ç–∏",
    announcement: "–û–±—ä—è–≤–ª–µ–Ω–∏—è",
    events: "–°–æ–±—ã—Ç–∏—è",
    reports: "–û—Ç—á–µ—Ç—ã",
  }
  return names[category] || category
}

function editPost(id) {
  const post = currentPosts.find((p) => p.id === id)
  if (!post) return

  currentEditId = id
  document.getElementById("formTitle").textContent = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
  document.getElementById("title").value = post.title
  document.getElementById("date").value = post.date
  document.getElementById("category").value = post.category
  document.getElementById("excerpt").value = post.excerpt
  document.getElementById("tags").value = post.tags ? post.tags.join(", ") : ""

  quillEditor.root.innerHTML = post.content

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞
  currentMedia = post.media ? [...post.media] : []
  renderMediaList()

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
  document.getElementById("formTitle").scrollIntoView({ behavior: "smooth" })
}

function deletePost(id) {
  if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?")) return

  currentPosts = currentPosts.filter((p) => p.id !== id)
  renderPostsTable()
  showFormStatus('üóëÔ∏è –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.', "warn")
}

async function handleMediaUpload(event) {
  const files = Array.from(event.target.files)
  handleMediaFiles(files)
  event.target.value = ""
}

async function handleMediaFiles(files) {
  if (files.length === 0) return

  showFormStatus("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã...", "warn")

  try {
    const formData = new FormData()
    files.forEach((file) => formData.append("files", file))

    const response = await fetch(`${API_BASE}/upload`, {
      method: "POST",
      body: formData,
    })

    const result = await response.json()
    if (response.ok) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ —Ç–µ–∫—É—â–∏–º –º–µ–¥–∏–∞
      result.files.forEach((file, index) => {
        const mediaItem = {
          type: file.mimetype.startsWith("image/") ? "image" : "video",
          src: file.path,
          alt: file.originalName,
          caption: "",
          cover: currentMedia.length === 0 && index === 0, // –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª = –æ–±–ª–æ–∂–∫–∞, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –ø—É—Å—Ç–æ–µ
        }
        currentMedia.push(mediaItem)
      })

      renderMediaList()
      showFormStatus(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.files.length} —Ñ–∞–π–ª–æ–≤`, "ok")
    } else {
      throw new Error(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    }
  } catch (error) {
    showFormStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, "err")
  }
}

function renderMediaList() {
  const container = document.getElementById("mediaList")
  container.innerHTML = ""

  currentMedia.forEach((media, index) => {
    const card = document.createElement("div")
    card.className = "media-card"

    const preview =
      media.type === "image"
        ? `<img src="${media.src}" alt="${media.alt}" />`
        : `<video src="${media.src}" muted></video>`

    card.innerHTML = `
      ${media.cover ? '<div class="cover-badge">–û–±–ª–æ–∂–∫–∞</div>' : ""}
      <button class="remove" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>
      <div class="preview">${preview}</div>
      <div class="fields">
        <input type="text" placeholder="–ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞" value="${media.caption || ""}" class="caption-input" />
        <label style="display: flex; align-items: center; gap: 6px; font-size: 0.9rem;">
          <input type="checkbox" ${media.cover ? "checked" : ""} class="cover-checkbox" />
          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±–ª–æ–∂–∫—É
        </label>
      </div>
    `

    const removeBtn = card.querySelector(".remove")
    const captionInput = card.querySelector(".caption-input")
    const coverCheckbox = card.querySelector(".cover-checkbox")

    removeBtn.addEventListener("click", () => {
      console.log("–ö–ª–∏–∫–Ω—É–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞:", index, "–º–µ–¥–∏–∞:", media)
      removeMediaByReference(media)
    })

    captionInput.addEventListener("change", (e) => {
      console.log("–ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞:", index)
      updateMediaCaptionByReference(media, e.target.value)
    })

    coverCheckbox.addEventListener("change", (e) => {
      console.log("–ò–∑–º–µ–Ω–∏–ª–∏ –æ–±–ª–æ–∂–∫—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞:", index, "–∑–Ω–∞—á–µ–Ω–∏–µ:", e.target.checked)
      setCoverByReference(media, e.target.checked)
    })

    container.appendChild(card)
  })
}

function removeMediaByReference(mediaToRemove) {
  if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª?")) return

  console.log("–£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª:", mediaToRemove)
  console.log("–ú–∞—Å—Å–∏–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:", currentMedia.length, "—ç–ª–µ–º–µ–Ω—Ç–æ–≤")

  const indexToRemove = currentMedia.findIndex((media) => media === mediaToRemove)

  if (indexToRemove === -1) {
    console.error("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ!")
    return
  }

  console.log("–ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", indexToRemove)

  currentMedia.splice(indexToRemove, 1)

  console.log("–ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", currentMedia.length, "—ç–ª–µ–º–µ–Ω—Ç–æ–≤")

  // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –æ–±–ª–æ–∂–∫–æ–π, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–ª–æ–∂–∫–æ–π
  if (mediaToRemove.cover && currentMedia.length > 0) {
    currentMedia[0].cover = true
    console.log("–ù–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É:", currentMedia[0])
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
  const container = document.getElementById("mediaList")
  container.innerHTML = ""

  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
  setTimeout(() => {
    renderMediaList()
  }, 10)
}

function updateMediaCaptionByReference(mediaToUpdate, caption) {
  const index = currentMedia.findIndex((media) => media === mediaToUpdate)
  if (index !== -1) {
    currentMedia[index].caption = caption
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–¥–∏–∞", index, ":", caption)
  }
}

function setCoverByReference(mediaToUpdate, isCover) {
  const index = currentMedia.findIndex((media) => media === mediaToUpdate)
  if (index === -1) {
    console.error("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏!")
    return
  }

  console.log("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è –º–µ–¥–∏–∞", index, ":", isCover)

  if (isCover) {
    // –£–±–∏—Ä–∞–µ–º –æ–±–ª–æ–∂–∫—É —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    currentMedia.forEach((media) => {
      media.cover = false
    })
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    mediaToUpdate.cover = true
  } else {
    // –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –æ–±–ª–æ–∂–∫—É —Å —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    mediaToUpdate.cover = false
  }

  console.log(
    "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫:",
    currentMedia.map((m, i) => `${i}: ${m.cover}`),
  )

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
  setTimeout(() => renderMediaList(), 0)
}

function removeMedia(index) {
  if (index < 0 || index >= currentMedia.length) {
    console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", index)
    return
  }
  removeMediaByReference(currentMedia[index])
}

function updateMediaCaption(index, caption) {
  if (index >= 0 && index < currentMedia.length) {
    updateMediaCaptionByReference(currentMedia[index], caption)
  }
}

function setCover(index, isCover) {
  if (index < 0 || index >= currentMedia.length) {
    console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏:", index)
    return
  }
  setCoverByReference(currentMedia[index], isCover)
}

function savePost() {
  const title = document.getElementById("title").value.trim()
  const date = document.getElementById("date").value
  const category = document.getElementById("category").value
  const excerpt = document.getElementById("excerpt").value.trim()
  const tags = document.getElementById("tags").value.trim()
  const content = quillEditor.root.innerHTML.trim()

  if (!title || !date || !excerpt || !content || content === "<p><br></p>") {
    showFormStatus("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "err")
    return
  }

  const slug = generateSlug(title)
  const id = currentEditId || `${date}-${Date.now()}`

  const post = {
    id,
    slug,
    title,
    date,
    category,
    excerpt,
    content,
    tags: tags
      ? tags
          .split(",")
          .map((t) => t.trim())
          .filter((t) => t)
      : [],
    media: [...currentMedia],
  }

  if (currentEditId) {
    const index = currentPosts.findIndex((p) => p.id === currentEditId)
    if (index !== -1) {
      currentPosts[index] = post
    }
  } else {
    currentPosts.unshift(post)
  }

  renderPostsTable()
  resetForm()
  showFormStatus('‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.', "ok")
}

function resetForm() {
  currentEditId = null
  currentMedia = []
  document.getElementById("formTitle").textContent = "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
  document.getElementById("title").value = ""
  document.getElementById("date").value = new Date().toISOString().split("T")[0]
  document.getElementById("category").value = "news"
  document.getElementById("excerpt").value = ""
  document.getElementById("tags").value = ""
  quillEditor.setContents([])
  renderMediaList()
  hideFormStatus()
}

function generateSlug(title) {
  return title
    .toLowerCase()
    .replace(/[–∞-—è]/g, (char) => {
      const map = {
        –∞: "a",
        –±: "b",
        –≤: "v",
        –≥: "g",
        –¥: "d",
        –µ: "e",
        —ë: "yo",
        –∂: "zh",
        –∑: "z",
        –∏: "i",
        –π: "y",
        –∫: "k",
        –ª: "l",
        –º: "m",
        –Ω: "n",
        –æ: "o",
        –ø: "p",
        —Ä: "r",
        —Å: "s",
        —Ç: "t",
        —É: "u",
        —Ñ: "f",
        —Ö: "h",
        —Ü: "ts",
        —á: "ch",
        —à: "sh",
        —â: "sch",
        —ä: "",
        —ã: "y",
        —å: "",
        —ç: "e",
        —é: "yu",
        —è: "ya",
      }
      return map[char] || char
    })
    .replace(/[^a-z0-9\s-]/g, "")
    .replace(/\s+/g, "-")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "")
}

function showStatus(message, type) {
  const status = document.getElementById("status")
  status.textContent = message
  status.className = `result ${type}`
  status.style.display = "block"

  if (type === "ok") {
    setTimeout(() => {
      status.style.display = "none"
    }, 3000)
  }
}

function showFormStatus(message, type) {
  const status = document.getElementById("formResult")
  status.textContent = message
  status.className = `result ${type}`
  status.style.display = "block"

  if (type === "ok") {
    setTimeout(() => {
      status.style.display = "none"
    }, 3000)
  }
}

function hideFormStatus() {
  document.getElementById("formResult").style.display = "none"
}
